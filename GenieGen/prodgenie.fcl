#include "services.fcl"
#include "GENIEGen.fcl"
#include "G4Gen.fcl"
#include "ReadoutSim.fcl"
#include "ImprovedTransport.fcl"
#include "OccupiedSpillFilter.fcl"
#include "Metadata.fcl"

process_name: Genie

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "genie_hist.root" closeFileFast: false }
  RandomNumberGenerator: {} #ART native random number generator
  scheduler:             { wantTracer: true wantSummary: true }
  @table::standard_services
}
# Edit here to generate in a different detector. See Geometry.fcl
# If this is changed be sure to change the GENIE flux (below) to match
services.Geometry: @local::nd_geo

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  firstRun:    1000001     # Run number to use for this file
  firstSubRun: 1           # Subrun number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  # GSimpleFlux files used by GENIE are specific to a detector location
    # Be sure to keep it in sync with the geometry (above)
    generator: @local::genie_simpleflux_nd
    geantgen:  @local::standard_geant4
    photrans:  @local::standard_photrans
    daq:       @local::standard_rsim
    rns:       { module_type: "RandomNumberSaver" }
  }

  filters:
  {
    occupied:  @local::standard_occupiedspillfilter
  }

  analyzers:
  {
    metadata: @local::standard_metadata
  }

  #list the modules for this path, order matters
  simulate: [ generator, geantgen, photrans, daq, rns, occupied ]
  stream1:  [ metadata, out1 ] #could have multiple paths

  #things that modify the art::Event, filters and producers go here
  trigger_paths: [ simulate ]

 #end_path are things that do not modify art::Event,
 #includes analyzers and output modules. all items here can be run simultaneously
 end_paths:     [ stream1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
   SelectEvents:{ SelectEvents: [ simulate ] }
 }
}
physics.producers.daq.nd.ForceGain: 100