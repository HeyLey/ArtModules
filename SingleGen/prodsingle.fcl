#include "services.fcl"
#include "SingleGen.fcl"
#include "G4Gen.fcl"
#include "ReadoutSim.fcl"
#include "ImprovedTransport.fcl"
#include "OccupiedSpillFilter.fcl"
#include "Metadata.fcl"

process_name: SingleParticle
services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist.root" closeFileFast: false }
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::standard_services
}
# Edit here to generate in a different detector. See Geometry.fcl
services.Geometry: @local::nd_geo

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   10000       # Number of events to create
  firstRun:    1000001     # Run number to use for this file
  firstSubRun: 1           # Subrun number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_singlep
   geantgen:  @local::standard_geant4
   photrans:  @local::standard_photrans
    daq:       @local::standard_rsim
    #  rns:       { module_type: "RandomNumberSaver" }
    }

    filters:
    {
      occupied:  @local::standard_occupiedspillfilter
    }

    analyzers:
    {
      metadata: @local::standard_metadata
    }

    #list the modules for this path, order matters, filters reject all following items
    simulate: [ generator, geantgen, photrans, daq ] # rns, occupied ]

   # stream1:  [ metadata, out1 ] #could have multiple paths
    stream1:  [ out1 ]
    #things that modify the art::Event, filters and producers go here
    trigger_paths: [ simulate ]

    #end_path are things that do not modify art::Event,
    #includes analyzers and output modules. all items here can be run simultaneously
    end_paths:     [ stream1 ]
   }

   #block to define where the output goes.  if you defined a filter in the physics
   #block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
   #entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
   outputs:
   {
    out1:
     {
      module_type: RootOutput
      fileName:    "single_gen.root" #default file name, can override from command line with -o or --output
      SelectEvents: { SelectEvents: [ simulate ] }
     }
   }
   physics.producers.daq.nd.ForceGain: 100
   physics.producers.daq.fd.ForceGain: 140